 # Built-In Function (내장함수)

# 무지개의 일곱색깔을 저장하는 rainbow 리스트 생성 및 출력하기
# 1
rainbow = ['red', 'orange', 'yellow', 'green', 'blue', 'navy', 'purple']
for no, color in enumerate(rainbow):
  print('무지개의 {}번째 색은 {}입니다.'.format(no + 1, color))

# 2
for i in range(len(rainbow)):
  print(f'무지개의 {i+1}번째 색은 {rainbow[i]}입니다.')

# 어떤 학생의 점수를 입력받아 평균 점수, 최고 점수, 최저 점수를 구하기
# 몇 개의 점수를 입력 받을지 모르는 상황
# 0보다 작은 점수를 입력하면 더 이상 입력할 점수가 없음을 의미
# 입력받은 모든 점수는 exam 리스트에 저장
# 마지막에 입력된 0보다 작은 점수는 exam에 저장하지 않습니다.
exam = []
print('점수를 입력하세요. 더 이상 입력할 점수가 없으면 음수를 아무거나 입력하세요')
while True:
  score = int(input('점수 입력'))
  if score < 0:
    break
  else: 
    exam.append(score)
    avg = sum(exam) / len(exam)
   
print(f'평균 = {avg:.1f}, 최대 = {max(exam)}, 최소 = {min(exam)}')

# method(메소드)
# 지역번호 - 국번 - 가입자개별번호 형식으로 되어있는 전화번호
# 02-543-2109
# 031-4567-8900
# 위와 같은 예가 있을 때, 어떤 형식의 전화번호를 입력하더라도 국번을 추출하여 출력하기
# 1 index 활용하기
num = input('전화번호를 입력하세요 >> ')
start = num.index('-') + 1
end = num.index('-',start) # start 이후의 - index 번호
code = num[start:end]
print(code)

# 2 split() 활용하기
num = input('전화번호를 입력하세요 >> ')
code = num.split('-')[1]
print(code)

# 사업자 번호를 입력해 형식이 맞는지 점검하기
no = input('사업자등록번호를 입력하세요(예: 123-45-67890) >>> ')
condition1 = (no.find('-') == 3)
condition2 = (no.find('-', 4) == 6)
condition3 = (len(no) == 12)
condition4 = (no.replace('-', '').isdecimal())
if condition1 and condition2 and condition3 and condition4:
 print('올바른 형식입니다.')
else:
 print('올바른 형식이 아닙니다.')

# "김철수",85 의 형식을 관뢰되는 성적 프로그램의 데이터를 각각 name과 score 변수에 저장하기
data = input("이름과 성적을 입력하세요 >> ")
name, score = data.split(',')
name = name.strip('"')
    
print(name, score)

# User-Defined Fuction
# 사용자 정의함수

# 700원짜리 음료수를 뽑을 수 있는 자판기 프로그램 구현하기
# 돈을 넣으면 몇 잔의 음료수를 뽑을 수 있는지 그리고 잔돈은 얼마인지 모든 경우 출력하기

# 함수 정의
# 반환값 없음
# 함수 이름: vending_machine()
# 매개변수 : 정수 money

# 코드 구성

def vending_machine(money):
  for i in range(money // 700 + 1):
    print(f'음료수 = {i}개, 잔돈 = {money}원')
    money -= 700

vending_machine(3000)

# 키(Key)가 '과목명'이고, 값(value)이 '점수'인 marks 딕셔너리를 전달하면
# 해당 딕셔너리의 점수들의 평균을 반환하는 get_average() 함수를 구현하기

def get_average(marks):
  return sum(marks.values()) // len(marks)  

marks = {'국어': 90, '영어': 80, '수학': 85}
average = get_average(marks)
print('평균은 {}입니다.'.format(average))

# 축의금을 내는 사람의 이름과 그 사람이 낸 축의금을 딕셔너리에 저장하고
# 전체 축의금의 합계를 구할 수 있는 gift() 함수 구현하기

total = 0
def gift(dic, who, money):
  global total
  total += money
  dic[who] = money

wedding = {}
gift(wedding, '영희', 5)
gift(wedding, '철수', 3)
gift(wedding, '이모', 10)
print('축의금 명단: {}'.format(wedding))
print('전체 축의금: {}'.format(total))
